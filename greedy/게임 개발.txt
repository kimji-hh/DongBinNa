#게임 개발
# 1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향(반시계방향으로 90도 회전한 방향)부터 차례대로 갈 곳 정하기
# 2. 캐릭터의 왼쪽 방향에 가보지 않은 칸이 존재하면 왼쪽 방향으로 회전한 다음 왼쪽으로 한 칸 전진
# 왼쪽 방향에 가보지 않은 칸이 없다면 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.
# 3. 네 방향 모두 가본 칸이거나 바다로 되어있는 칸이면 바라보는 방향을 유지한 채로 한 칸 뒤로 가고
# 1단계로 돌아간다. 단 이 때, 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우에는 움직임을 멈춘다.

# 첫째 줄에 맵의 세로 크기 N과 가로 크기 M을 공백으로 구분하여 입력한다.
# 둘째 줄에 게임 캐릭터가 있는 칸의 좌표 (A, B)와 바라보는 방향 d가 서로 공백으로 구분하여 주어진다.
# 방향 d의 값으로는 0: 북쪽, 1: 동쪽, 2: 남쪽, 3: 서쪽이 존재한다.
# 셋째 줄부터 맵이 육지인지 바다인지에 대한 정보가 주어진다. N개의 줄에 맵의 상태가 북쪽부터 남쪽 순서대로,
# 각 줄의 데이터는 서쪽부터 동쪽 순서대로 주어진다. 맵의 외곽은 항상 바다로 되어있다.
# 0: 육지, 1: 바다
# 처음 캐릭터가 위치한 칸의 상태는 항상 육지이다.
# 첫째 줄에 이동을 마친 후 캐릭터가 

n, m = map(int,input().split())

# 방문한 위치를 저장하기 위한 맵 생성하여 2차원 리스트를 0으로 초기화
d = [[0] * m for _ in range(n)] # _는 따로 i로 선언하지 않고 반복문

# 현재 캐릭터의 X좌표, Y좌표, 방향을 입력받기
x, y, direction = map(int, input().split())

d[x][y] = 1 # 현재 좌표 방문 처리

# 전체 맵 정보를 입력받기
array = []
for i in range(n):
    array.append(list(map(int, input().split())))

# 북, 동, 남, 서 방향 정의.  왼쪽방향을 기준
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 왼쪽 방향으로 회전
def turn_left():
    global direction
    direction -= 1
    if direction == -1: # 왼쪽 방향으로만 회전 수행
        direction = 3



# 시뮬레이션 시작
count = 1
turn_time = 0
while True:
    # 1. 왼쪽 방향으로 회전한 다음
    turn_left()
    # 2. 왼쪽으로 한 칸 전진 
    nx = x + dx[direction]
    ny = y + dy[direction]

    # array = 육지? 바다?  d = 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동
    if d[nx][ny] == 0 and array[nx][ny] == 0:
        d[nx][ny] = 1
        x = nx
        y = ny
        count += 1
        turn_time = 0 # 해당 방향으로 갈 수 있으므로 돌지 않아도 됨
        continue
    # 회전한 이후 정면에 가보지 않은 칸이 없거나 바다인 경우
    else:
        turn_time += 1 # 해당 방향으로 갈 수 없으므로 +1번 돌기
    # 네 방향 모두 갈 수 없는 경우
    if turn_time == 4:
        nx = x - dx[direction]  # 뒤로가기
        ny = y - dy[direction]

        # 뒤로 갈 수 있다면 이동하기
        if array[nx][ny] == 0: # 육지이면
            x = nx
            y = ny
        # 뒤가 바다로 막혀있는 경우
        else:
            break
        turn_time = 0 # 초기화

# 정답 출력
print(count)