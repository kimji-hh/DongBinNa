# DFS(Depth-First-Search, 깊이 우선 탐색) 
# 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘


#### 인접 행렬
# 2차원 배열에 각 노드가 연결된 형태를 기록하는 방식
# 연결되지 않은 노드는 무한(INF)으로 표기

INF = 999999999

# 2차원 리스트를 이용해 인접 행렬 표현
graph = [
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]

print(graph)

################################
### 인접 리스트

# 행(Row)이 3개인 2차원 리스트
graph = [[] for _ in range(3)]

# 노드 0에 연결된 노드 정보 저장(노드, 거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

# 노드 1에 연결된 노드 정보 저장(노드, 거리)
graph[1].append((0, 7))

# 노드 2에 연결된 노드 정보 저장(노드, 거리)
graph[2].append((0, 5))

print(graph)

# 인접 행렬 vs 인접 리스트

# 인접 행렬
# - 장점: 두 노드가 연결되어있는지 정보 얻는 속도 빠름
# ex) 노드1과 노드7 연결 확인: graph[1][7]
# - 단점: 모든 관계를 저장하므로, 노드 개수가 많을수록 메모리 낭비

# 인접 리스트
# - 장점: 연결된 정보만 저장하므로 메모리 효율적 사용
# - 단점: 두 노드가 연결되어있는지 정보 얻는 속도 느림
# ex) 노드1에 대한 인접 리스트를 앞에서부터 차례대로 확인
