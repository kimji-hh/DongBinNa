# DFS
# 번호가 낮은 순으로 처리

# 1. 탐색 Start Node를 Stack에 삽입하고 방문 처리를 한다.
# 2. 스택의 최상단 Node에 방문하지 않은 인접 Node가 있으면 그 인접 Node를
# Stack에 넣고 방문 처리를 한다. 방문하지 않은 인접 Node가 없으면 
# Stack에서 최상단 Node를 꺼낸다.
# 3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.
# graph=현재 그래프, v=노드 번호, visited=방문한 노드 기록하는 리스트

def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')

    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]: # 방문하지 않았다면 == !visited[i]
            dfs(graph, i, visited)

# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [],
    [2, 3, 8], # [1]에 '2','3','8' 연결
    [1, 7],    # [2]에 '1', '7' 연결
    [1, 4, 5], # [3]에 '1', '4', '5' 연결
    [3, 5],    # [4]에 '3', '5' 연결
    [3, 4],    # [5]에 '3', '4' 연결
    [7],       # [6]에 '7', '8'
    [2, 6, 8], # [7]에 '2', '6', '8' 연결
    [1, 7]     # [8]에 '1', '7'

]
    
# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9

# 정의된 DFS 함수 호출
dfs(graph, 1, visited)